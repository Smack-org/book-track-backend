---
openapi: 3.1.0
info:
  title: Book-Track API
  description: Track your favourite literature list!
  license:
    name: Apache 2.0
    url: https://opensource.org/license/mit
  version: 0.0.1
paths:
  "/favourites/":
    get:
      tags:
      - favourites
      summary: Get Favourites
      operationId: get_favourites_favourites__get
      security:
      - OAuth2PasswordBearer: []
      parameters:
      - name: offset
        in: query
        required: false
        schema:
          type: integer
          default: 0
          title: Offset
      - name: limit
        in: query
        required: false
        schema:
          type: integer
          default: 20
          title: Limit
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/FavouriteBook"
                title: Response Get Favourites Favourites  Get
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
    post:
      tags:
      - favourites
      summary: Add Favourite
      operationId: add_favourite_favourites__post
      security:
      - OAuth2PasswordBearer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/BookID"
      responses:
        '201':
          description: Successful Response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/FavouriteBook"
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
  "/favourites/{book_id}":
    delete:
      tags:
      - favourites
      summary: Remove Favourite
      operationId: remove_favourite_favourites__book_id__delete
      security:
      - OAuth2PasswordBearer: []
      parameters:
      - name: book_id
        in: path
        required: true
        schema:
          type: integer
          title: Book Id
      responses:
        '204':
          description: Successful Response
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
  "/reading-list/":
    get:
      tags:
      - reading-list
      summary: Get Reading List
      description: |-
        Get the reading list of currently authorized user.

        - **returns**: User reading list
      operationId: get_reading_list_reading_list__get
      security:
      - OAuth2PasswordBearer: []
      parameters:
      - name: offset
        in: query
        required: false
        schema:
          type: integer
          default: 0
          title: Offset
      - name: limit
        in: query
        required: false
        schema:
          type: integer
          default: 20
          title: Limit
      - name: status
        in: query
        required: false
        schema:
          "$ref": "#/components/schemas/ReadingStatus"
          default: all
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/ReadingListEntry"
                title: Response Get Reading List Reading List  Get
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
    post:
      tags:
      - reading-list
      summary: Add To Reading List
      description: |-
        Add a book to the reading list of authorized user

        - **returns**: Model of entry added to reading list
      operationId: add_to_reading_list_reading_list__post
      security:
      - OAuth2PasswordBearer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ReadingListEntryCreate"
      responses:
        '201':
          description: Successful Response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ReadingListEntry"
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
  "/reading-list/{book_id}":
    patch:
      tags:
      - reading-list
      summary: Update Reading Status
      description: |-
        Update authorized user's reading list entry

        - **returns**: Model of updated reading list entry
      operationId: update_reading_status_reading_list__book_id__patch
      security:
      - OAuth2PasswordBearer: []
      parameters:
      - name: book_id
        in: path
        required: true
        schema:
          type: integer
          title: Book Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ReadingListEntryUpdate"
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ReadingListEntry"
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
    delete:
      tags:
      - reading-list
      summary: Remove From Reading List
      description: |-
        Delete authorized user's reading list entry

        - **returns**: 204 on successful delete
      operationId: remove_from_reading_list_reading_list__book_id__delete
      security:
      - OAuth2PasswordBearer: []
      parameters:
      - name: book_id
        in: path
        required: true
        schema:
          type: integer
          title: Book Id
      responses:
        '204':
          description: Successful Response
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
  "/books/":
    get:
      tags:
      - books
      summary: List Books
      description: |-
        Retrieve a list of books with optional filtering and enrichment for favourites.

        Uses Gutendex API to fetch books and enriches them with favourite status for
        the authenticated user.

        Args:
            params (ListBooksParams): Query parameters for filtering/sorting books.
            client (GutendexClient): Client for interacting with Gutendex API.
            user (UserInfo): The currently authenticated user.
            db (AsyncSession): Async SQLAlchemy session.

        Returns:
            EnrichedBooksList: List of books with additional user-specific metadata.
      operationId: list_books_books__get
      security:
      - OAuth2PasswordBearer: []
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          default: 1
          title: Page
      - name: author_year_start
        in: query
        required: false
        schema:
          anyOf:
          - type: integer
          - type: 'null'
          title: Author Year Start
      - name: author_year_end
        in: query
        required: false
        schema:
          anyOf:
          - type: integer
          - type: 'null'
          title: Author Year End
      - name: copyright
        in: query
        required: false
        schema:
          anyOf:
          - type: string
          - type: 'null'
          title: Copyright
      - name: ids
        in: query
        required: false
        schema:
          anyOf:
          - type: string
          - type: 'null'
          title: Ids
      - name: languages
        in: query
        required: false
        schema:
          anyOf:
          - type: string
          - type: 'null'
          title: Languages
      - name: mime_type
        in: query
        required: false
        schema:
          anyOf:
          - type: string
          - type: 'null'
          title: Mime Type
      - name: search
        in: query
        required: false
        schema:
          anyOf:
          - type: string
          - type: 'null'
          title: Search
      - name: topic
        in: query
        required: false
        schema:
          anyOf:
          - type: string
          - type: 'null'
          title: Topic
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/EnrichedBooksList"
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
  "/books/{id}":
    get:
      tags:
      - books
      summary: Get Book
      description: |-
        Retrieve a single book by its ID and enrich it with favourite metadata.

        Fetches book metadata from Gutendex API and annotates it with the
        user's favourite status.

        Args:
            id (int): The ID of the book to retrieve.
            client (GutendexClient): Gutendex API client.
            user (UserInfo): The currently authenticated user.
            db (AsyncSession): Async SQLAlchemy session.

        Returns:
            BookEnriched: Book data enriched with favourite status.

        Raises:
            HTTPException (404): If the book is not found in Gutendex.
      operationId: get_book_books__id__get
      security:
      - OAuth2PasswordBearer: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          title: Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/BookEnriched"
        '404':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
          description: Not Found
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
  "/users/new":
    post:
      tags:
      - users
      summary: Register a new user
      description: |-
        Create a new user account and return an access token for that user.

        - **user**: User creation data (login, password, optional username)
        - **returns**: JWT access token and token type
      operationId: post_new_user_users_new_post
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UserCreate"
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Token"
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
  "/users/token":
    post:
      tags:
      - users
      summary: Log in with credentials
      description: |-
        Authenticate a user and return an access token.

        - **form_data**: OAuth2 form with username and password
        - **returns**: JWT access token and token type
      operationId: login_for_access_token_users_token_post
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              "$ref": "#/components/schemas/Body_login_for_access_token_users_token_post"
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Token"
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
  "/users/me":
    get:
      tags:
      - users
      summary: Get current user profile
      description: |-
        Get the currently authenticated user's information.

        - **returns**: User details (login, username, created_at, etc.)
      operationId: get_self_users_me_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserInfo"
      security:
      - OAuth2PasswordBearer: []
  "/metrics":
    get:
      summary: Metrics
      description: Endpoint that serves Prometheus metrics.
      operationId: metrics_metrics_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
components:
  schemas:
    Body_login_for_access_token_users_token_post:
      properties:
        grant_type:
          anyOf:
          - type: string
            pattern: "^password$"
          - type: 'null'
          title: Grant Type
        username:
          type: string
          title: Username
        password:
          type: string
          title: Password
        scope:
          type: string
          title: Scope
          default: ''
        client_id:
          anyOf:
          - type: string
          - type: 'null'
          title: Client Id
        client_secret:
          anyOf:
          - type: string
          - type: 'null'
          title: Client Secret
      type: object
      required:
      - username
      - password
      title: Body_login_for_access_token_users_token_post
    Book:
      properties:
        id:
          type: integer
          title: Id
        title:
          type: string
          title: Title
        subjects:
          items:
            type: string
          type: array
          title: Subjects
          default: []
        authors:
          items:
            "$ref": "#/components/schemas/Person"
          type: array
          title: Authors
          default: []
        summaries:
          items:
            type: string
          type: array
          title: Summaries
          default: []
        translators:
          items:
            "$ref": "#/components/schemas/Person"
          type: array
          title: Translators
          default: []
        bookshelves:
          items:
            type: string
          type: array
          title: Bookshelves
          default: []
        languages:
          items:
            type: string
          type: array
          title: Languages
          default: []
        copyright:
          anyOf:
          - type: boolean
          - type: 'null'
          title: Copyright
        media_type:
          type: string
          title: Media Type
        formats:
          additionalProperties:
            type: string
          type: object
          title: Formats
          default: {}
        download_count:
          type: integer
          title: Download Count
      type: object
      required:
      - id
      - title
      - media_type
      - download_count
      title: Book
    BookEnriched:
      properties:
        id:
          type: integer
          title: Id
        title:
          type: string
          title: Title
        subjects:
          items:
            type: string
          type: array
          title: Subjects
          default: []
        authors:
          items:
            "$ref": "#/components/schemas/Person"
          type: array
          title: Authors
          default: []
        summaries:
          items:
            type: string
          type: array
          title: Summaries
          default: []
        translators:
          items:
            "$ref": "#/components/schemas/Person"
          type: array
          title: Translators
          default: []
        bookshelves:
          items:
            type: string
          type: array
          title: Bookshelves
          default: []
        languages:
          items:
            type: string
          type: array
          title: Languages
          default: []
        copyright:
          anyOf:
          - type: boolean
          - type: 'null'
          title: Copyright
        media_type:
          type: string
          title: Media Type
        formats:
          additionalProperties:
            type: string
          type: object
          title: Formats
          default: {}
        download_count:
          type: integer
          title: Download Count
        is_favourite:
          type: boolean
          title: Is Favourite
        became_favourite_at:
          anyOf:
          - type: string
            format: date-time
          - type: 'null'
          title: Became Favourite At
      type: object
      required:
      - id
      - title
      - media_type
      - download_count
      - is_favourite
      - became_favourite_at
      title: BookEnriched
    BookID:
      properties:
        book_id:
          type: integer
          title: Book Id
      type: object
      required:
      - book_id
      title: BookID
    EnrichedBooksList:
      properties:
        count:
          type: integer
          title: Count
        next:
          anyOf:
          - type: string
          - type: 'null'
          title: Next
        previous:
          anyOf:
          - type: string
          - type: 'null'
          title: Previous
        results:
          items:
            "$ref": "#/components/schemas/BookEnriched"
          type: array
          title: Results
      type: object
      required:
      - count
      - results
      title: EnrichedBooksList
    Error:
      properties:
        code:
          type: integer
          title: Code
        message:
          type: string
          title: Message
      type: object
      required:
      - code
      - message
      title: Error
    FavouriteBook:
      properties:
        book:
          "$ref": "#/components/schemas/Book"
        added_at:
          type: string
          format: date-time
          title: Added At
      type: object
      required:
      - book
      - added_at
      title: FavouriteBook
    HTTPValidationError:
      properties:
        detail:
          items:
            "$ref": "#/components/schemas/ValidationError"
          type: array
          title: Detail
      type: object
      title: HTTPValidationError
    Person:
      properties:
        name:
          type: string
          title: Name
        birth_year:
          anyOf:
          - type: integer
          - type: 'null'
          title: Birth Year
        death_year:
          anyOf:
          - type: integer
          - type: 'null'
          title: Death Year
      type: object
      required:
      - name
      title: Person
    ReadingListEntry:
      properties:
        status:
          "$ref": "#/components/schemas/ReadingStatus"
        book:
          "$ref": "#/components/schemas/Book"
        updated_at:
          type: string
          format: date-time
          title: Updated At
        created_at:
          type: string
          format: date-time
          title: Created At
      type: object
      required:
      - status
      - book
      - updated_at
      - created_at
      title: ReadingListEntry
    ReadingListEntryCreate:
      properties:
        status:
          "$ref": "#/components/schemas/ReadingStatus"
        book_id:
          type: integer
          title: Book Id
      type: object
      required:
      - status
      - book_id
      title: ReadingListEntryCreate
    ReadingListEntryUpdate:
      properties:
        status:
          "$ref": "#/components/schemas/ReadingStatus"
      type: object
      required:
      - status
      title: ReadingListEntryUpdate
    ReadingStatus:
      type: string
      enum:
      - want_to_read
      - reading
      - done
      - all
      title: ReadingStatus
    Token:
      properties:
        access_token:
          type: string
          title: Access Token
        token_type:
          type: string
          title: Token Type
      type: object
      required:
      - access_token
      - token_type
      title: Token
    UserCreate:
      properties:
        login:
          type: string
          title: Login
          description: Unique login identifier for the user
        username:
          anyOf:
          - type: string
          - type: 'null'
          title: Username
          description: Optional display name for the user
        password:
          type: string
          minLength: 8
          title: Password
          description: Password with at least 8 characters
      type: object
      required:
      - login
      - password
      title: UserCreate
      description: |-
        Schema used when creating a new user.

        Inherits from UserBase and adds password validation.

        Attributes:
            password (str): Password string with minimum length enforcement.
    UserInfo:
      properties:
        login:
          type: string
          title: Login
          description: Unique login identifier for the user
        username:
          anyOf:
          - type: string
          - type: 'null'
          title: Username
          description: Optional display name for the user
        created_at:
          type: string
          format: date-time
          title: Created At
          description: UTC timestamp when the user was created
      type: object
      required:
      - login
      title: UserInfo
      description: |-
        Schema representing stored user information.

        Attributes:
            created_at (datetime): Timestamp of user creation.
    ValidationError:
      properties:
        loc:
          items:
            anyOf:
            - type: string
            - type: integer
          type: array
          title: Location
        msg:
          type: string
          title: Message
        type:
          type: string
          title: Error Type
      type: object
      required:
      - loc
      - msg
      - type
      title: ValidationError
  securitySchemes:
    OAuth2PasswordBearer:
      type: oauth2
      flows:
        password:
          scopes: {}
          tokenUrl: "/users/token"

