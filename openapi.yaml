# yaml-language-server: $schema=https://raw.githubusercontent.com/OAI/OpenAPI-Specification/refs/heads/main/_archive_/schemas/v3.0/schema.yaml 
openapi: 3.0.0
info:
  title: Book Tracking API
  description: Manage favourite books and reading lists
  version: 1.0.0
servers:
  - url: https://api.example.com/v1
paths:
  # Favourite List
  /favourites:
    get:
      summary: Get all favourite books
      parameters:
        - $ref: '#/components/parameters/paginationOffset'
        - $ref: '#/components/parameters/paginationLimit'
      responses:
        '200':
          description: List of favourite books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FavouriteBook'
    post:
      summary: Add a book to favourites
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookID'
      responses:
        '201':
          description: Book added to favourites
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
  /favourites/{book_id}:
    delete:
      summary: Remove a book from favourites
      parameters:
        - $ref: '#/components/parameters/bookId'
      responses:
        '204':
          description: Book removed successfully

  # List with statuses
  /reading-list:
    get:
      summary: Get reading list (paginated)
      parameters:
        - $ref: '#/components/parameters/paginationOffset'
        - $ref: '#/components/parameters/paginationLimit'
        - name: status
          in: query
          description: Filter by reading status
          schema:
            $ref: '#/components/schemas/ReadingStatusQuery'
      responses:
        '200':
          description: List of books in reading list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReadingListEntry'
    post:
      summary: Add a book to reading list
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadingListEntryInput'
      responses:
        '201':
          description: Book added to reading list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadingListEntry'
  /reading-list/{book_id}:
    patch:
      summary: Update reading status of a book
      parameters:
        - $ref: '#/components/parameters/bookId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadingStatusUpdate'
      responses:
        '200':
          description: Status updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadingListEntry'
    delete:
      summary: Remove a book from reading list
      parameters:
        - $ref: '#/components/parameters/bookId'
      responses:
        '204':
          description: Book removed successfully

components:
  parameters:
    paginationOffset:
      name: offset
      in: query
      description: Pagination offset
      required: false
      schema:
        type: integer
        default: 0
    paginationLimit:
      name: limit
      in: query
      description: Pagination limit
      required: false
      schema:
        type: integer
        default: 20
    bookId:
      name: book_id
      in: path
      required: true
      schema:
        type: integer
        example: "560"

  schemas:
    BookID:
      type: object
      properties:
        id:
          type: integer
          example: "84"
    Book:
      type: object
      properties:
        id:
          type: integer
          example: "560"
        title:
          type: string
          example: "The Hobbit"
        authors:
          type: array
          items:
            type: string
            example: "J.R.R. Tolkien"
      required:
        - id
        - title

    FavouriteBook:
      type: object
      properties:
        book:
          $ref: '#/components/schemas/Book'
        added_at:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"

    ReadingStatus:
      type: string
      enum:
        - want_to_read
        - reading
        - done
      example: "want_to_read"
    ReadingStatusQuery: # for filtering in get endpoint
      type: string
      enum:
        - want_to_read
        - reading
        - done
        - all
      example: "want_to_read"
    ReadingListEntry:
      type: object
      properties:
        book:
          $ref: '#/components/schemas/Book'
        status:
          $ref: '#/components/schemas/ReadingStatus'
        updated_at:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"
        created_at:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"
      required:
        - book
        - status
    ReadingListEntryInput:
      type: object
      properties:
        book_id:
          type: integer
          example: "560"
        status:
          $ref: '#/components/schemas/ReadingStatus'
          default: want_to_read
      required:
        - book_id
    ReadingStatusUpdate:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/ReadingStatus'
      required:
        - status

