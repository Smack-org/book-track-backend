# yaml-language-server: $schema=https://raw.githubusercontent.com/OAI/OpenAPI-Specification/refs/heads/main/_archive_/schemas/v3.0/schema.yaml 
openapi: 3.0.0
info:
  title: Book Tracking API
  description: Manage favourite books and reading lists
  version: 1.0.0
servers:
  - url: https://api.example.com/v1
paths:
  # Favourite List
  /favourites:
    get:
      summary: Get all favourite books
      parameters:
        - $ref: '#/components/parameters/paginationOffset'
        - $ref: '#/components/parameters/paginationLimit'
      responses:
        '200':
          description: List of favourite books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FavouriteBook'
    post:
      summary: Add a book to favourites
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookID'
      responses:
        '201':
          description: Book added to favourites
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavouriteBook'
  /favourites/{book_id}:
    delete:
      summary: Remove a book from favourites
      parameters:
        - $ref: '#/components/parameters/bookId'
      responses:
        '204':
          description: Book removed successfully

  # List with statuses
  /reading-list:
    get:
      summary: Get reading list (paginated)
      parameters:
        - $ref: '#/components/parameters/paginationOffset'
        - $ref: '#/components/parameters/paginationLimit'
        - name: status
          in: query
          description: Filter by reading status
          schema:
            $ref: '#/components/schemas/ReadingStatusQuery'
      responses:
        '200':
          description: List of books in reading list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReadingListEntry'
    post:
      summary: Add a book to reading list
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadingListEntryInput'
      responses:
        '201':
          description: Book added to reading list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadingListEntry'
  /reading-list/{book_id}:
    patch:
      summary: Update reading status of a book
      parameters:
        - $ref: '#/components/parameters/bookId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadingStatusUpdate'
      responses:
        '200':
          description: Status updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadingListEntry'
    delete:
      summary: Remove a book from reading list
      parameters:
        - $ref: '#/components/parameters/bookId'
      responses:
        '204':
          description: Book removed successfully

  /books:
    get:
      summary: List and query books
      description: |
        Returns a paginated list of books with optional filters for author years,
        copyright status, IDs, languages, MIME types, search keywords, sorting, and topics.
      parameters:
        - name: page
          in: query
          description: Page number for pagination (default 1)
          schema:
            type: integer
            default: 1
        - name: author_year_start
          in: query
          description: Minimum author birth year (positive CE or negative BCE)
          schema:
            type: integer
        - name: author_year_end
          in: query
          description: Maximum author death year (positive CE or negative BCE)
          schema:
            type: integer
        - name: copyright
          in: query
          description: "Comma-separated values: true, false, or null"
          schema:
            type: array
            items:
              type: string
              enum: ["true", "false", "null"]
            style: form
            explode: false
        - name: ids
          in: query
          description: Comma-separated Project Gutenberg IDs
          schema:
            type: array
            items:
              type: integer
            style: form
            explode: false
        - name: languages
          in: query
          description: Comma-separated two-character language codes
          schema:
            type: array
            items:
              type: string
              pattern: '^[a-z]{2}$'
            style: form
            explode: false
        - name: mime_type
          in: query
          description: MIME type prefix (e.g., text/ or text/html)
          schema:
            type: string
        - name: search
          in: query
          description: Space-separated keywords (case-insensitive)
          schema:
            type: string
        - name: sort
          in: query
          description: Order by ID or popularity (`ascending`, `descending`, `popular`)
          schema:
            type: string
            enum: [ascending, descending, popular]
        - name: topic
          in: query
          description: Keyword search in bookshelves or subjects (case-insensitive)
          schema:
            type: string
      responses:
        '200':
          description: A paginated list of books
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BooksList'
  /books/{id}:
    get:
      summary: Retrieve a single book
      description: Fetch detailed metadata for the book with the given Project Gutenberg ID.
      parameters:
        - name: id
          in: path
          required: true
          description: Project Gutenberg book ID
          schema:
            type: integer
      responses:
        '200':
          description: A single book object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  parameters:
    paginationOffset:
      name: offset
      in: query
      description: Pagination offset
      required: false
      schema:
        type: integer
        default: 0
    paginationLimit:
      name: limit
      in: query
      description: Pagination limit
      required: false
      schema:
        type: integer
        default: 20
    bookId:
      name: book_id
      in: path
      required: true
      schema:
        type: integer
        example: 560

  schemas:
    BooksList:
      type: object
      properties:
        count:
          type: integer
          description: Total number of books matching the query
        next:
          type: string
          nullable: true
          description: URL of next page
        previous:
          type: string
          nullable: true
          description: URL of previous page
        results:
          type: array
          items:
            $ref: '#/components/schemas/Book'
    Book:
      type: object
      properties:
        id:
          type: integer
          description: Project Gutenberg ID of the book
        title:
          type: string
        subjects:
          type: array
          items:
            type: string
        authors:
          type: array
          items:
            $ref: '#/components/schemas/Person'
        summaries:
          type: array
          items:
            type: string
        translators:
          type: array
          items:
            $ref: '#/components/schemas/Person'
        bookshelves:
          type: array
          items:
            type: string
        languages:
          type: array
          items:
            type: string
        copyright:
          type: boolean
          nullable: true
        media_type:
          type: string
        formats:
          type: object
          additionalProperties:
            type: string
        download_count:
          type: integer
    Person:
      type: object
      properties:
        name:
          type: string
        birth_year:
          type: integer
          nullable: true
        death_year:
          type: integer
          nullable: true
    FavouriteBook:
      type: object
      properties:
        book:
          $ref: '#/components/schemas/Book'
        added_at:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"
    BookID:
      type: object
      properties:
        book_id:
          type: integer
      required:
        - book_id
    ReadingStatus:
      type: string
      enum:
        - want_to_read
        - reading
        - done
      example: "want_to_read"
    ReadingStatusQuery:
      type: string
      enum:
        - want_to_read
        - reading
        - done
        - all
      example: "want_to_read"
    ReadingListEntry:
      type: object
      properties:
        book:
          $ref: '#/components/schemas/Book'
        status:
          $ref: '#/components/schemas/ReadingStatus'
        updated_at:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"
        created_at:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"
      required:
        - book
        - status
    ReadingListEntryInput:
      type: object
      properties:
        book_id:
          type: integer
          example: 560
        status:
          $ref: '#/components/schemas/ReadingStatus'
          default: want_to_read
      required:
        - book_id
    ReadingStatusUpdate:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/ReadingStatus'
      required:
        - status
    Error:
      type: object
      properties:
        code:
          type: integer
          example: 404
        message:
          type: string
          example: "Book not found"
