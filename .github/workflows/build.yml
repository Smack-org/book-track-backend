name: Book Track Build

on:
  workflow_dispatch:
  pull_request:
    paths:
      - .github/workflows/build.yml
      - src/**
      - tests/**
      - Dockerfile

jobs:
  lint-test:
    runs-on: ubuntu-latest
    name: Lint and Test
    permissions:
      contents: read
      packages: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install radon flake8 pytest pytest-cov  # linting deps
          pip install \
            fastapi \
            uvicorn \
            fastapi-code-generator \
            python-dotenv \
            prometheus-fastapi-instrumentator \
            sqlalchemy \
            python-jose \
            passlib \
            asyncpg \
            python-multipart \
            databases \
            coverage \
            gevent \
            h11 \
            async-lru \
            pytest-asyncio

      - name: Run Radon Maintainability Check
        run: |
          output=$(radon mi -s . -e tests/conftest.py)
          echo "$output"
          error_found=0
          while IFS= read -r line; do
            metric=$(echo "$line" | grep -oP '\(\K[0-9.]+(?=\))')
            if [ ! -z "$metric" ]; then
              if (( $(echo "$metric < 70" | bc -l) )); then
                echo "Fail: '$line' has a maintainability metric below 70."
                error_found=1
              fi
            fi
          done <<< "$output"

          if [ $error_found -ne 0 ]; then
            echo "One or more files have a maintainability metric below 70. Failing the build."
            exit 1
          else
            echo "All files have acceptable maintainability metrics."
          fi
        shell: bash

      - name: Run Flake8 Linting
        run: flake8 .

      - name: Run unit tests
        shell: bash
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
          JWT_TOKEN_SECRET: 2343udh3jbdj3ybj3fbhj3fbjkfhkjf3fh3kjfn3kjfhn3kjfh3fkjhfjflfekjfekf
        run: |
          set -ex

          testlog=unit-tests-report.txt

          # Run tests and store the output in a log file
          pytest --cov=src ./unit-tests -p no:warnings > $testlog

          # Check if there are any test failures
          if grep -q "FAILED" $testlog; then
              echo "Some of the tests have failed! Heads up!"
              exit 1
          fi

          echo "===== COVERAGE ====="

          # Extract the coverage percentage from the "TOTAL" line
          coverage=$(grep -oP 'TOTAL\s+\d+\s+\d+\s+\K\d+' $testlog)

          # Print the extracted coverage percentage
          echo "Total coverage: ${coverage:-Unavailable}%"

          # Check if the coverage is less than 65%
          echo "If smaller than 65% - too bad."
          if [ -n "$coverage" ] && [ "$(echo "$coverage < 65" | bc)" -eq 1 ]; then
              echo "Coverage $coverage% is too low!"
              exit 1
          fi

          echo "Wow! Coverage is higher than 65%, congrats!"

      - name: Is there docker compose ?
        run: |
          docker compose version || docker-compose version

      - name: Run e2e tests
        run: |
          docker compose --file compose.test.yaml up --build -d &> /dev/null

          echo "Tests are granted 15 seconds to run"
          sleep 15

          echo "Time is up! Stopping the containers..."
          docker compose --file compose.test.yaml down &> /dev/null

          echo "===== TEST LOGS ====="
          cat /tmp/booktrack/testlog.txt || echo "No test log found."

          if grep -q "FAILED" /tmp/booktrack/testlog.txt; then
            echo "Some of the tests have failed! Heads up!"
            exit 1
          fi

          echo "===== COVERAGE ====="
          coverage=$(tail -1 /tmp/booktrack/report.txt 2>/dev/null | awk '{print $NF}' | tr -d '%')
          echo "Total coverage: ${coverage:-Unavailable}%"

          echo "If smaller than 65% - too bad."
          if [ -n "$coverage" ] && [ "$(echo "$coverage < 65" | bc)" -eq 1 ]; then
            echo "Coverage $coverage% is too low!"
            exit 1
          fi

          echo "Wow! Coverage is higher than 65%, congrats !"
